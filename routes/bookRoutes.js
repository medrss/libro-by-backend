import express from 'express';
import db from '../db/db.js';
import { authenticateToken } from '../middleware/authMiddleware.js';
import multer from 'multer';
import path from 'path';

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ `multer` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–Ω–∏–≥
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/books'); // –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  }
});

const upload = multer({ storage });

// üìå API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
router.post('/', authenticateToken, upload.single('image'), async (req, res) => {
  if (req.user.role_id !== 1) return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

  const { title, author, year, price, stock, rental_stock, description, categories } = req.body;
  const available = req.body.available === '1' ? 1 : 0;
  const rentable = req.body.rentable === '1' ? 1 : 0;
  const imagePath = req.file ? `/uploads/books/${req.file.filename}` : null;

  if (!title || !author || !year || !price || description === undefined) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
  }

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
    const [result] = await db.query(`
      INSERT INTO books (title, author, year, price, available, rentable, stock, rental_stock, image, description)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [title, author, year, price, available, rentable, stock, rental_stock, imagePath, description]);

    const bookId = result.insertId;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥–∏
    if (categories) {
      const parsedCategories = JSON.parse(categories);
      if (Array.isArray(parsedCategories) && parsedCategories.length > 0) {
        const categoryValues = parsedCategories.map(categoryId => [bookId, categoryId]);
        await db.query('INSERT INTO book_categories (book_id, category_id) VALUES ?', [categoryValues]);
      }
    }

    res.json({ message: '–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', image: imagePath });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.get('/', async (req, res) => {
    try {
      const [books] = await db.query(`
        SELECT books.*, 
               COALESCE(GROUP_CONCAT(categories.name), '') AS categories
        FROM books
        LEFT JOIN book_categories ON books.id = book_categories.book_id
        LEFT JOIN categories ON book_categories.category_id = categories.id
        GROUP BY books.id
      `);
  
      // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–∞—Å—Å–∏–≤
      const formattedBooks = books.map(book => ({
        ...book,
        categories: book.categories ? book.categories.split(', ') : []
      }));
  
      res.json(formattedBooks);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const [book] = await db.query('SELECT * FROM books WHERE id = ?', [req.params.id]);
    if (book.length === 0) return res.status(404).json({ message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json(book[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.get('/search/:query', async (req, res) => {
    try {
      const query = `%${req.params.query}%`;
      const [books] = await db.query('SELECT id, title FROM books WHERE title LIKE ?', [query]);
      res.json(books);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  

export default router;
