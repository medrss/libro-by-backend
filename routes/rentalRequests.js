import express from 'express';
import db from '../db/db.js';
import { authenticateToken } from '../middleware/authMiddleware.js';

const router = express.Router();

// üìå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É**
router.post('/', authenticateToken, async (req, res) => {
  const { book_id, requested_return_date } = req.body;

  if (!req.user) return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  if (!book_id || !requested_return_date) return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });

  try {
    await db.query(`
      INSERT INTO rental_requests (user_id, book_id, requested_return_date, status)
      VALUES (?, ?, ?, 'pending')
    `, [req.user.id, book_id, requested_return_date]);

    res.json({ message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìå **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –≤–∏–¥–∏—Ç –∑–∞–ø—Ä–æ—Å—ã**
router.get('/', authenticateToken, async (req, res) => {
  if (req.user.role_id !== 3) return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

  try {
    const [requests] = await db.query(`
      SELECT rental_requests.*, users.full_name AS user_name, books.title AS book_title
      FROM rental_requests
      JOIN users ON rental_requests.user_id = users.id
      JOIN books ON rental_requests.book_id = books.id
      WHERE rental_requests.status = 'pending'
    `);

    res.json(requests);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìå **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å**
router.put('/:id', authenticateToken, async (req, res) => {
  if (req.user.role_id !== 3) return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

  const { status } = req.body;
  if (!['approved', 'denied'].includes(status)) return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });

  try {
    await db.query(`UPDATE rental_requests SET status = ? WHERE id = ?`, [status, req.params.id]);

    if (status === 'approved') {
      const [[request]] = await db.query(`SELECT * FROM rental_requests WHERE id = ?`, [req.params.id]);
      await db.query(`
        INSERT INTO rentals (user_id, book_id, rental_date, return_date, status, payment_method)
        VALUES (?, ?, NOW(), ?, 'active', 'in_store')
      `, [request.user_id, request.book_id, request.requested_return_date]);
    }

    res.json({ message: `–ó–∞–ø—Ä–æ—Å ${status === 'approved' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}` });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
