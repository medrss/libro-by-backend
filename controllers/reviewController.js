import pool from '../db/db.js';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç Review (–≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ `db.js`)
const Review = {
  async findAllByBook(bookId) {
    const [reviews] = await pool.query(
      'SELECT r.*, u.full_name, u.profile_picture FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.book_id = ?',
      [bookId]
    );
    return reviews;
  },

  async createReview({ user_id, book_id, rating, pros, cons, comment, image }) {
    const [result] = await pool.query(
      'INSERT INTO reviews (user_id, book_id, rating, pros, cons, comment, image) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [user_id, book_id, rating, pros, cons, comment, image]
    );
    return { id: result.insertId, user_id, book_id, rating, pros, cons, comment, image };
  }
};

const getReviewsByBook = async (req, res) => {
  const { bookId } = req.params;

  try {
    console.log("üìö –ò—â–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–Ω–∏–≥–∏ ID:", bookId);
    const reviews = await Review.findAllByBook(bookId);

    const SERVER_URL = process.env.SERVER_URL || "http://localhost:3000"; // ‚úÖ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è

    const formattedReviews = reviews.map((review) => ({
      id: review.id,
      full_name: review.full_name?.split(" ").slice(0, 2).join(" ") || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", // ‚úÖ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
      user_avatar: review.profile_picture ? `${SERVER_URL}/uploads/avatars/${review.profile_picture}` : null, // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É
      rating: review.rating,
      pros: review.pros,
      cons: review.cons,
      comment: review.comment,
      image: review.image ? `${SERVER_URL}/uploads/reviews/${review.image}` : null, // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞
    }));

    console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã:", formattedReviews);
    res.json({ reviews: formattedReviews });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤" });
  }
};


const createReview = async (req, res) => {
    console.log("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—É—á–µ–Ω!");
  
    if (!req.user) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!");
      return res.status(401).json({ message: "–û—à–∏–±–∫–∞: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å." });
    }
  
    const { rating, pros, cons, comment, book_id } = req.body;
    const user_id = req.user.id;
    const image = req.file ? req.file.filename : null;
  
    try {
      console.log("üë§ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      const [userData] = await pool.query(
        "SELECT full_name, profile_picture FROM users WHERE id = ?", [user_id]
      );
  
      if (!userData.length || !userData[0]) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return res.status(404).json({ message: "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }
  
      const full_name = userData[0]?.full_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
      const profile_picture = userData[0]?.profile_picture || null;
  
      console.log("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤...");
      const reviewData = { user_id, book_id, rating, pros, cons, comment, image };
      const newReview = await Review.createReview(reviewData);
  
      console.log("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID:", newReview.id);
  
      const SERVER_URL = process.env.SERVER_URL || "http://localhost:3000"; // ‚úÖ –§–∏–∫—Å `undefined`

      const avatarPath = profile_picture ? `${SERVER_URL}/uploads/avatars/${profile_picture}` : null;
      const imagePath = newReview.image ? `${SERVER_URL}/uploads/reviews/${newReview.image}` : null;
      
      console.log("üë§ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É:", avatarPath);
      console.log("üì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –æ—Ç–∑—ã–≤—É:", imagePath);
  
      console.log("üñº –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:");
      console.log("üë§ –ê–≤–∞—Ç–∞—Ä (–∏–∑ –±–∞–∑—ã):", profile_picture);
      console.log("üì∏ –§–æ—Ç–æ –æ—Ç–∑—ã–≤–∞ (–∏–∑ –±–∞–∑—ã):", newReview.image);
  
      res.json({
        id: newReview.id,
        full_name: full_name,
        user_avatar: avatarPath,
        rating: newReview.rating,
        pros: newReview.pros,
        cons: newReview.cons,
        comment: newReview.comment,
        image: imagePath,
      });
  
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞." });
    }
  };
  
  
export { getReviewsByBook, createReview };
